// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  password String
  salt     String
  profile  Profile?

  @@map("users")
}

model Profile {
  id        String     @id
  user      User       @relation(fields: [id], references: [id])
  email     String     @unique
  userName  String     @unique // range of user name length should be set
  name      String // this also need length limit
  image     String     @default("/defaultProfile.jpg")
  asked     Question[] @relation("ask")
  received  Question[] @relation("receive")
  following Follow[]   @relation("following")
  follower  Follow[]   @relation("follower")
}

model Question {
  id           String    @id @default(cuid())
  createAt     DateTime  @default(now())
  answerAt     DateTime?
  type         Type      @default(anonymous)
  status       Status    @default(received)
  question     String    @db.VarChar(300) // max content length is 300
  answer       String    @default("") @db.VarChar(300)
  authorName   String?
  receiverName String
  author       Profile?  @relation("ask", fields: [authorName], references: [userName])
  receiver     Profile   @relation("receive", fields: [receiverName], references: [userName])
  likeCount    Int       @default(0)

  @@unique([id, receiverName])
  @@unique([id, receiverName, status])
  @@map("questions")
}

model Like {
  questionId String
  userName   String

  @@id([questionId, userName])
}

model Follow {
  userName         String
  followName       String
  startFollowingAt DateTime @default(now())
  following        Profile  @relation("following", fields: [userName], references: [userName])
  follower         Profile  @relation("follower", fields: [followName], references: [userName])

  @@id([userName, followName])
}

enum Type {
  anonymous
  onymous
}

enum Status {
  received
  accepted
  rejected
}
